/************
Processor: ts
************/

// blob.ts
declare namespace ns_0 {
  /**
   * Blob class for creating blobs in a GitHub repository.
   * This class interacts with the GitHub API to create blobs.
   */
  export class Blob {
    private api;
    private token;
    constructor(api: string, token: string);
    /**
     * Creates a blob in the specified repository.
     * @param content - The content of the blob.
     * @param repo - The repository information.
     * @returns The SHA of the created blob.
     * @throws Error if the blob creation fails.
     */
    create(content: string, repo: {
      owner: string;
      name: string;
    }): Promise<string>;
  }
}


// branch.ts
declare namespace ns_1 {
  /**
   * Branch class for managing branches in a GitHub repository.
   * This class interacts with the GitHub API to get the latest commit and update the branch.
   */
  export class Branch {
    private api;
    private token;
    constructor(api: string, token: string);
    /**
     * Gets the latest commit SHA of the specified branch.
     *
     * @param repo - The repository information.
     * @param branch - The branch name.
     * @returns The SHA of the latest commit.
     * @throws Error if the request fails.
     */
    getLatestCommit(repo: {
      owner: string;
      name: string;
    }, branch: string): Promise<string>;
    /**
     * Updates the branch to point to the specified commit SHA.
     *
     * @param repo - The repository information.
     * @param branch - The branch name.
     * @param commitSha - The commit SHA to point to.
     * @throws Error if the request fails.
     */
    update(repo: {
      owner: string;
      name: string;
    }, branch: string, commitSha: string): Promise<void>;
    /**
     * Creates a new branch from the specified base SHA.
     *
     * @param repo - The repository information.
     * @param branch - The branch name.
     * @param baseSha - The base commit SHA.
     * @throws Error if the request fails.
     */
    create(repo: {
      owner: string;
      name: string;
    }, branch: string, baseSha: string): Promise<void>;
  }
}


// commit.ts
declare namespace ns_2 {
  /**
   * Commit class for creating commits in a GitHub repository.
   * This class interacts with the GitHub API to create commits.
   */
  export class Commit {
    private api;
    private token;
    constructor(api: string, token: string);
    /**
     * Creates a commit in the specified repository.
     *
     * @param treeSha - The tree SHA to associate with the commit.
     * @param parentSha - The parent commit SHA.
     * @param message - The commit message.
     * @param repo - The repository information.
     * @returns The SHA of the created commit.
     * @throws Error if the commit creation fails.
     */
    create(treeSha: string, parentSha: string, message: string, repo: {
      owner: string;
      name: string;
    }): Promise<string>;
  }
}


// files.ts
declare namespace ns_3 {
  /**
   * Files class for adding multiple files in a GitHub repository.
   * This class interacts with Blob, Tree, and Commit classes to perform the actions.
   */
  export class Files {
    private api;
    private token;
    private repo;
    private branch;
    constructor(repo: {
      owner: string;
      name: string;
    }, branch: string);
    /**
     * Adds multiple files to the specified repository.
     *
     * @param message - The commit message.
     * @param files - The files to add with their paths.
     * @throws Error if any step in the process fails.
     */
    add(message: string, files: {
      path: string;
      fullPath: string;
    }[]): Promise<void>;
  }
}


// index.ts
declare namespace ns_4 {
  /**
   * Interface for the parameters required to add multiple files.
   */
  export interface IAddFilesParams {
    repo: {
      owner: string;
      name: string;
    };
    branch: string;
    message: string;
    folder: string;
  }
  /**
   * Adds multiple files to a GitHub repository.
   *
   * @param params - The parameters required to add files.
   */
  export function addFiles(params: IAddFilesParams): Promise<void>;
}


// tree.ts
declare namespace ns_5 {
  /**
   * Tree class for creating trees in a GitHub repository.
   * This class interacts with the GitHub API to create trees.
   */
  export class Tree {
    private api;
    private token;
    private blob;
    constructor(api: string, token: string);
    /**
     * Creates a tree in the specified repository.
     *
     * @param base - The base tree SHA.
     * @param files - The files to include in the tree.
     * @param repo - The repository information.
     * @returns The SHA of the created tree.
     * @throws Error if the tree creation fails.
     */
    create(base: string, files: {
      path: string;
      content: string;
    }[], repo: {
      owner: string;
      name: string;
    }): Promise<string>;
  }
}


export import IAddFilesParams = ns_4.IAddFilesParams;
export import addFiles = ns_4.addFiles;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };